{"Structs/FPError.html#/s:7SwiftFP7FPErrorVyACSSSgcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"FPError"},"Structs/FPError.html#/s:10Foundation14LocalizedErrorP16errorDescriptionSSSgvp":{"name":"errorDescription","parent_name":"FPError"},"Structs/FPError.html":{"name":"FPError","abstract":"<p>Undocumented</p>"},"Protocols/TryType.html#/s:7SwiftFP7TryTypeP5value5ValueQzSgvp":{"name":"value","abstract":"<p>Get the success value.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypeP5errors5Error_pSgvp":{"name":"error","abstract":"<p>Get the failure error.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE8asEitherAA0F0Oys5Error_p5ValueQzGyF":{"name":"asEither()","abstract":"<p>Undocumented</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE9isSuccessSbvp":{"name":"isSuccess","abstract":"<p>Check if the operation was successful.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE9isFailureSbvp":{"name":"isFailure","abstract":"<p>Check if the operation failed.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE10catchErroryAA0C0Cy5ValueQzGAHs0F0_pKXEF":{"name":"catchError(_:)","abstract":"<p>Catch an Error Try and return a fallback value.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE10getOrThrow5ValueQzyKF":{"name":"getOrThrow()","abstract":"<p>Get success value or throw failure Error.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE9getOrElsey5ValueQzAFF":{"name":"getOrElse(_:)","abstract":"<p>Get success value if available, or return a backup success value.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE13successOrElseyAA0C0Cy5ValueQzGqd__AA0c11ConvertibleD0Rd__AGQyd__AHRSlF":{"name":"successOrElse(_:)","abstract":"<p>Get the current Try if it is successful, or return another Try if not.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE6filteryAA0C0Cy5ValueQzGSbAHKXE_s5Error_ptF":{"name":"filter(_:_:)","abstract":"<p>Return the current Try if the inner element passes a check, otherwise","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE6filteryAA0C0Cy5ValueQzGSbAHKXE_SStF":{"name":"filter(_:_:)","abstract":"<p>Convenience method to filter out an inner element.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE4castyAA0C0Cyqd__Gqd__mlF":{"name":"cast(_:)","abstract":"<p>Convenience method to cast the inner value to a different type.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE3mapyAA0C0Cyqd__Gqd__5ValueQzKXElF":{"name":"map(_:)","abstract":"<p>Functor.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE5applyyAA0C0Cyqd_0_Gqd__AA0c11ConvertibleD0Rd__qd_0_5ValueQzKcAIRtd__r0_lF":{"name":"apply(_:)","abstract":"<p>Applicative.</p>","parent_name":"TryType"},"Protocols/TryType.html#/s:7SwiftFP7TryTypePAAE7flatMapyAA0C0Cy5ValueQyd__Gqd__AGQzKXEAA0c11ConvertibleD0Rd__lF":{"name":"flatMap(_:)","abstract":"<p>Monad.</p>","parent_name":"TryType"},"Protocols/TryConvertibleType.html#/s:7SwiftFP18TryConvertibleTypeP5ValueQa":{"name":"Value","abstract":"<p>Undocumented</p>","parent_name":"TryConvertibleType"},"Protocols/TryConvertibleType.html#/s:7SwiftFP18TryConvertibleTypeP02asC0AA0C0Cy5ValueQzGyF":{"name":"asTry()","abstract":"<p>Undocumented</p>","parent_name":"TryConvertibleType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypeP4justy5ValueQzSgAFFZ":{"name":"just(_:)","abstract":"<p>Undocumented</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypeP7nothing5ValueQzSgyFZ":{"name":"nothing()","abstract":"<p>Undocumented</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypeP5value5ValueQzSgvp":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE6isSomeSbvp":{"name":"isSome","abstract":"<p>Undocumented</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE9isNothingSbvp":{"name":"isNothing","abstract":"<p>Undocumented</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE4castyqd__Sgqd__mlF":{"name":"cast(_:)","abstract":"<p>Convenience method to cast the inner value to a different type.</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE6filtery5ValueQzSgSbAFKXEF":{"name":"filter(_:)","abstract":"<p>Filter the inner value using a selector and return nothing if it does","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE9getOrElsey5ValueQzAFF":{"name":"getOrElse(_:)","abstract":"<p>Get the wrapped value, or a default value if it is not available.</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE9getOrElsey5ValueQzSgAGF":{"name":"getOrElse(_:)","abstract":"<p>Return the current Optional, or a backup Optional is the former is empty.</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE10someOrElsey5ValueQzSgqd__AA0c11ConvertibleD0Rd__AEQyd__AFRSlF":{"name":"someOrElse(_:)","abstract":"<p>Return the current Optional, or a backup Optional is the former is empty.</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE10getOrThrowy5ValueQzs5Error_pKF":{"name":"getOrThrow(_:)","abstract":"<p>Get the Value instance or throw an Error.</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE10getOrThrowy5ValueQzSSKF":{"name":"getOrThrow(_:)","abstract":"<p>Get the Value instance or throw an Error.</p>","parent_name":"OptionalType"},"Protocols/OptionalType.html#/s:7SwiftFP12OptionalTypePAAE12catchNothingy5ValueQzSgAFyKXEF":{"name":"catchNothing(_:)","abstract":"<p>Catch a Nothing Optional and return a backup value.</p>","parent_name":"OptionalType"},"Protocols/OptionalConvertibleType.html#/s:7SwiftFP23OptionalConvertibleTypeP5ValueQa":{"name":"Value","abstract":"<p>Undocumented</p>","parent_name":"OptionalConvertibleType"},"Protocols/OptionalConvertibleType.html#/s:7SwiftFP23OptionalConvertibleTypeP02asC05ValueQzSgyF":{"name":"asOptional()","abstract":"<p>Undocumented</p>","parent_name":"OptionalConvertibleType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypeP4left4LeftQzSgvp":{"name":"left","abstract":"<p>Get L, if available.</p>","parent_name":"EitherType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypeP5right5RightQzSgvp":{"name":"right","abstract":"<p>Get R, if available.</p>","parent_name":"EitherType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypePAAE6isLeftSbvp":{"name":"isLeft","abstract":"<p>Check if this Either is left.</p>","parent_name":"EitherType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypePAAE7isRightSbvp":{"name":"isRight","abstract":"<p>Check if this Either is right.</p>","parent_name":"EitherType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypePAAE10projectionAA10ProjectionCy4LeftQz5RightQzGvp":{"name":"projection","abstract":"<p>Since Either is non-biased by default, we need to access projections","parent_name":"EitherType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypePAAE9getOrElsey5RightQzAFF":{"name":"getOrElse(_:)","abstract":"<p>Get R with a fallback.</p>","parent_name":"EitherType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypePAAE10getOrThrowy5RightQzs5Error_pKF":{"name":"getOrThrow(_:)","abstract":"<p>Get R or throw the supplied Error if not available.</p>","parent_name":"EitherType"},"Protocols/EitherType.html#/s:7SwiftFP10EitherTypePAAE5bimapyAA0C0Oyqd__qd_0_Gqd__4LeftQzXE_qd_0_5RightQzXEtr0_lF":{"name":"bimap(_:_:)","abstract":"<p>Map on both sides.</p>","parent_name":"EitherType"},"Protocols/EitherConvertibleType.html#/s:7SwiftFP21EitherConvertibleTypeP4LeftQa":{"name":"Left","abstract":"<p>Undocumented</p>","parent_name":"EitherConvertibleType"},"Protocols/EitherConvertibleType.html#/s:7SwiftFP21EitherConvertibleTypeP5RightQa":{"name":"Right","abstract":"<p>Undocumented</p>","parent_name":"EitherConvertibleType"},"Protocols/EitherConvertibleType.html#/s:7SwiftFP21EitherConvertibleTypeP02asC0AA0C0Oy4LeftQz5RightQzGyF":{"name":"asEither()","abstract":"<p>Undocumented</p>","parent_name":"EitherConvertibleType"},"Protocols/EitherConvertibleType.html":{"name":"EitherConvertibleType","abstract":"<p>Use this to implement either-or behavior.</p>"},"Protocols/EitherType.html":{"name":"EitherType","abstract":"<p>Undocumented</p>"},"Protocols/OptionalConvertibleType.html":{"name":"OptionalConvertibleType","abstract":"<p>Classes that implement this protocol should be convertible to an Optional.</p>"},"Protocols/OptionalType.html":{"name":"OptionalType","abstract":"<p>Classes that implement this protocol must be expressible as an Optional.</p>"},"Protocols/TryConvertibleType.html":{"name":"TryConvertibleType","abstract":"<p>Use this to wrap operations that can throw Error.</p>"},"Protocols/TryType.html":{"name":"TryType","abstract":"<p>Undocumented</p>"},"Extensions/Optional.html#/s:Sq7SwiftFPE5Valuea":{"name":"Value","abstract":"<p>Undocumented</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE4justyxSgxFZ":{"name":"just(_:)","abstract":"<p>Undocumented</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE7nothingxSgyFZ":{"name":"nothing()","abstract":"<p>Undocumented</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE10asOptionalxSgyF":{"name":"asOptional()","abstract":"<p>Undocumented</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE5valuexSgvp":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE5asTryAA0D0CyxGyF":{"name":"asTry()","abstract":"<p>Convert this Optional into a Try.</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE5asTryyAA0D0CyxGs5Error_pF":{"name":"asTry(_:)","abstract":"<p>Convert this Optional into a Try.</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE5asTryyAA0D0CyxGSSF":{"name":"asTry(_:)","abstract":"<p>Convert this Optional into a Try.</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE3zipyqd_0_Sgqd_1__qd_0_Say5ValueQyd__GKXEtAA23OptionalConvertibleTypeRd__7ElementQyd_1_Rsd__STRd_1_r1_lFZ":{"name":"zip(_:_:)","abstract":"<p>Zip a Sequence of OptionalConvertibleType with a resultSelector.</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE3zipyqd_0_Sgqd_0_Say5ValueQyd__GKXE_qd__dtAA23OptionalConvertibleTypeRd__r0_lFZ":{"name":"zip(_:_:)","abstract":"<p>Zip a Sequence of OptionalConvertibleType with a resultSelector.</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq7SwiftFPE7zipWithyqd_0_Sgqd___qd_0_x_5ValueQyd__tKXEtAA23OptionalConvertibleTypeRd__r0_lF":{"name":"zipWith(_:_:)","abstract":"<p>Zip with another Optional with a selector function.</p>","parent_name":"Optional"},"Extensions/Optional.html":{"name":"Optional"},"Enums/Either.html#/s:7SwiftFP6EitherO4leftyACyxq_GxcAEmr0_lF":{"name":"left(_:)","abstract":"<p>Undocumented</p>","parent_name":"Either"},"Enums/Either.html#/s:7SwiftFP6EitherO5rightyACyxq_Gq_cAEmr0_lF":{"name":"right(_:)","abstract":"<p>Undocumented</p>","parent_name":"Either"},"Enums/Either.html#/s:7SwiftFP6EitherOyACyxq_Gqd__c4LeftQyd__Rsz5RightQyd__Rs_AA0C4TypeRd__lufc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"Either"},"Enums/Either.html#/s:7SwiftFP10EitherTypeP4left4LeftQzSgvp":{"name":"left","parent_name":"Either"},"Enums/Either.html#/s:7SwiftFP10EitherTypeP5right5RightQzSgvp":{"name":"right","parent_name":"Either"},"Enums/Either.html#/s:7SwiftFP6EitherO02asC0ACyxq_GyF":{"name":"asEither()","abstract":"<p>Undocumented</p>","parent_name":"Either"},"Enums/Either.html":{"name":"Either","abstract":"<p>Undocumented</p>"},"Classes/Try.html#/s:7SwiftFP3TryC7successyACyxGxFZ":{"name":"success(_:)","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC7failureyACyxGs5Error_pFZ":{"name":"failure(_:)","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC7failureyACyxGSSFZ":{"name":"failure(_:)","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP7TryTypeP5value5ValueQzSgvp":{"name":"value","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP7TryTypeP5errors5Error_pSgvp":{"name":"error","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryCyACyxGxyKXEcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryCyACyxGxcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryCyACyxGs5Error_pcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC02asC0ACyxGyF":{"name":"asTry()","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC10asOptionalxSgyF":{"name":"asOptional()","abstract":"<p>Undocumented</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC4fromyACyxGxSg_s5Error_ptFZ":{"name":"from(_:_:)","abstract":"<p>Produce a Try from an Optional, and throw an Error if the value is","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC4fromyACyxGxSg_SStFZ":{"name":"from(_:_:)","abstract":"<p>Produce a Try from an Optional, and throw an Error if the value is","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC4fromyACyxGxSgFZ":{"name":"from(_:)","abstract":"<p>Produce a Try from an Optional, and throw a default Error if the value is","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC3zipyACyqd_1_Gqd___qd_0_qd_1_5ValueQyd___AFQyd_0_tKXEtAA0C15ConvertibleTypeRd__AaIRd_0_r1_lFZ":{"name":"zip(_:_:_:)","abstract":"<p>Zip two Try instances to produce a Try of another type.</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC3zipyACyqd_0_Gqd_1__qd_0_Say5ValueQyd__GKXEtAA0C15ConvertibleTypeRd__7ElementQyd_1_Rsd__STRd_1_r1_lFZ":{"name":"zip(_:_:)","abstract":"<p>Zip a Sequence of TryConvertibleType with a result selector function.</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC3zipyACyqd_0_Gqd_0_Say5ValueQyd__GKXE_qd__dtAA0C15ConvertibleTypeRd__r0_lFZ":{"name":"zip(_:_:)","abstract":"<p>Zip a Sequence of TryConvertibleType with a result selector function.</p>","parent_name":"Try"},"Classes/Try.html#/s:7SwiftFP3TryC7zipWithyACyqd_0_Gqd___qd_0_x_5ValueQyd__tKXEtAA0C15ConvertibleTypeRd__r0_lF":{"name":"zipWith(_:_:)","abstract":"<p>Zip with another Try instance to produce a Try of another type.</p>","parent_name":"Try"},"Classes/RightProjection.html#/s:7SwiftFP15RightProjectionC5valueq_Sgvp":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"RightProjection"},"Classes/RightProjection.html#/s:7SwiftFP15RightProjectionC3mapyAA6EitherOyxqd__Gqd__q_XElF":{"name":"map(_:)","abstract":"<p>Undocumented</p>","parent_name":"RightProjection"},"Classes/RightProjection.html#/s:7SwiftFP15RightProjectionC7flatMapyAA6EitherOyxqd__Gqd_0_q_XE4LeftQyd_0_Rsz0C0Qyd_0_Rsd__AA0G15ConvertibleTypeRd_0_r0_lF":{"name":"flatMap(_:)","abstract":"<p>Undocumented</p>","parent_name":"RightProjection"},"Classes/LeftProjection.html#/s:7SwiftFP14LeftProjectionC5valuexSgvp":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"LeftProjection"},"Classes/LeftProjection.html#/s:7SwiftFP14LeftProjectionC3mapyAA6EitherOyqd__q_Gqd__xXElF":{"name":"map(_:)","abstract":"<p>Undocumented</p>","parent_name":"LeftProjection"},"Classes/LeftProjection.html#/s:7SwiftFP14LeftProjectionC7flatMapyAA6EitherOyqd__q_Gqd_0_xXE5RightQyd_0_Rs_0C0Qyd_0_Rsd__AA0G15ConvertibleTypeRd_0_r0_lF":{"name":"flatMap(_:)","abstract":"<p>Undocumented</p>","parent_name":"LeftProjection"},"Classes/Projection.html#/s:7SwiftFP10ProjectionC4leftAA04LeftC0Cyxq_Gvp":{"name":"left","abstract":"<p>Get LeftProjection.</p>","parent_name":"Projection"},"Classes/Projection.html#/s:7SwiftFP10ProjectionC5rightAA05RightC0Cyxq_Gvp":{"name":"right","abstract":"<p>Get RightProjection.</p>","parent_name":"Projection"},"Classes/Projection.html#/s:7SwiftFP10ProjectionC8asEitherAA0E0Oyxq_GyF":{"name":"asEither()","abstract":"<p>Undocumented</p>","parent_name":"Projection"},"Classes/Projection.html":{"name":"Projection","abstract":"<p>We need to access the Projection for true monad behaviors.</p>"},"Classes/LeftProjection.html":{"name":"LeftProjection","abstract":"<p>Left-biased projection.</p>"},"Classes/RightProjection.html":{"name":"RightProjection","abstract":"<p>Right-biased projection.</p>"},"Classes/Try.html":{"name":"Try","abstract":"<p>Undocumented</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}